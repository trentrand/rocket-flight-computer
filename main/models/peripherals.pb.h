// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peripherals.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_peripherals_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_peripherals_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_peripherals_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_peripherals_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_peripherals_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_peripherals_2eproto_metadata_getter(int index);
namespace models {
class BNO055;
struct BNO055DefaultTypeInternal;
extern BNO055DefaultTypeInternal _BNO055_default_instance_;
class DirectionalVector;
struct DirectionalVectorDefaultTypeInternal;
extern DirectionalVectorDefaultTypeInternal _DirectionalVector_default_instance_;
}  // namespace models
PROTOBUF_NAMESPACE_OPEN
template<> ::models::BNO055* Arena::CreateMaybeMessage<::models::BNO055>(Arena*);
template<> ::models::DirectionalVector* Arena::CreateMaybeMessage<::models::DirectionalVector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace models {

// ===================================================================

class DirectionalVector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:models.DirectionalVector) */ {
 public:
  inline DirectionalVector() : DirectionalVector(nullptr) {}
  virtual ~DirectionalVector();
  explicit constexpr DirectionalVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectionalVector(const DirectionalVector& from);
  DirectionalVector(DirectionalVector&& from) noexcept
    : DirectionalVector() {
    *this = ::std::move(from);
  }

  inline DirectionalVector& operator=(const DirectionalVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectionalVector& operator=(DirectionalVector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectionalVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectionalVector* internal_default_instance() {
    return reinterpret_cast<const DirectionalVector*>(
               &_DirectionalVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DirectionalVector& a, DirectionalVector& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectionalVector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectionalVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectionalVector* New() const final {
    return CreateMaybeMessage<DirectionalVector>(nullptr);
  }

  DirectionalVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectionalVector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectionalVector& from);
  void MergeFrom(const DirectionalVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectionalVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "models.DirectionalVector";
  }
  protected:
  explicit DirectionalVector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_peripherals_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:models.DirectionalVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peripherals_2eproto;
};
// -------------------------------------------------------------------

class BNO055 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:models.BNO055) */ {
 public:
  inline BNO055() : BNO055(nullptr) {}
  virtual ~BNO055();
  explicit constexpr BNO055(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BNO055(const BNO055& from);
  BNO055(BNO055&& from) noexcept
    : BNO055() {
    *this = ::std::move(from);
  }

  inline BNO055& operator=(const BNO055& from) {
    CopyFrom(from);
    return *this;
  }
  inline BNO055& operator=(BNO055&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BNO055& default_instance() {
    return *internal_default_instance();
  }
  static inline const BNO055* internal_default_instance() {
    return reinterpret_cast<const BNO055*>(
               &_BNO055_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BNO055& a, BNO055& b) {
    a.Swap(&b);
  }
  inline void Swap(BNO055* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BNO055* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BNO055* New() const final {
    return CreateMaybeMessage<BNO055>(nullptr);
  }

  BNO055* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BNO055>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BNO055& from);
  void MergeFrom(const BNO055& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BNO055* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "models.BNO055";
  }
  protected:
  explicit BNO055(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_peripherals_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 1,
  };
  // .models.DirectionalVector direction = 1;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::models::DirectionalVector& direction() const;
  ::models::DirectionalVector* release_direction();
  ::models::DirectionalVector* mutable_direction();
  void set_allocated_direction(::models::DirectionalVector* direction);
  private:
  const ::models::DirectionalVector& _internal_direction() const;
  ::models::DirectionalVector* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::models::DirectionalVector* direction);
  ::models::DirectionalVector* unsafe_arena_release_direction();

  // @@protoc_insertion_point(class_scope:models.BNO055)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::models::DirectionalVector* direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peripherals_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DirectionalVector

// double x = 1;
inline void DirectionalVector::clear_x() {
  x_ = 0;
}
inline double DirectionalVector::_internal_x() const {
  return x_;
}
inline double DirectionalVector::x() const {
  // @@protoc_insertion_point(field_get:models.DirectionalVector.x)
  return _internal_x();
}
inline void DirectionalVector::_internal_set_x(double value) {
  
  x_ = value;
}
inline void DirectionalVector::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:models.DirectionalVector.x)
}

// double y = 2;
inline void DirectionalVector::clear_y() {
  y_ = 0;
}
inline double DirectionalVector::_internal_y() const {
  return y_;
}
inline double DirectionalVector::y() const {
  // @@protoc_insertion_point(field_get:models.DirectionalVector.y)
  return _internal_y();
}
inline void DirectionalVector::_internal_set_y(double value) {
  
  y_ = value;
}
inline void DirectionalVector::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:models.DirectionalVector.y)
}

// double z = 3;
inline void DirectionalVector::clear_z() {
  z_ = 0;
}
inline double DirectionalVector::_internal_z() const {
  return z_;
}
inline double DirectionalVector::z() const {
  // @@protoc_insertion_point(field_get:models.DirectionalVector.z)
  return _internal_z();
}
inline void DirectionalVector::_internal_set_z(double value) {
  
  z_ = value;
}
inline void DirectionalVector::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:models.DirectionalVector.z)
}

// -------------------------------------------------------------------

// BNO055

// .models.DirectionalVector direction = 1;
inline bool BNO055::_internal_has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline bool BNO055::has_direction() const {
  return _internal_has_direction();
}
inline void BNO055::clear_direction() {
  if (GetArena() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
}
inline const ::models::DirectionalVector& BNO055::_internal_direction() const {
  const ::models::DirectionalVector* p = direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::models::DirectionalVector&>(
      ::models::_DirectionalVector_default_instance_);
}
inline const ::models::DirectionalVector& BNO055::direction() const {
  // @@protoc_insertion_point(field_get:models.BNO055.direction)
  return _internal_direction();
}
inline void BNO055::unsafe_arena_set_allocated_direction(
    ::models::DirectionalVector* direction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:models.BNO055.direction)
}
inline ::models::DirectionalVector* BNO055::release_direction() {
  
  ::models::DirectionalVector* temp = direction_;
  direction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::models::DirectionalVector* BNO055::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:models.BNO055.direction)
  
  ::models::DirectionalVector* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::models::DirectionalVector* BNO055::_internal_mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::models::DirectionalVector>(GetArena());
    direction_ = p;
  }
  return direction_;
}
inline ::models::DirectionalVector* BNO055::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:models.BNO055.direction)
  return _internal_mutable_direction();
}
inline void BNO055::set_allocated_direction(::models::DirectionalVector* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete direction_;
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(direction);
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:models.BNO055.direction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace models

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_peripherals_2eproto
