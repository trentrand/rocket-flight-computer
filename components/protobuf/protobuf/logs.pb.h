// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_logs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_logs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "peripherals.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_logs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_logs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_logs_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_logs_2eproto_metadata_getter(int index);
namespace models {
class Logs;
struct LogsDefaultTypeInternal;
extern LogsDefaultTypeInternal _Logs_default_instance_;
class Logs_LogEntry;
struct Logs_LogEntryDefaultTypeInternal;
extern Logs_LogEntryDefaultTypeInternal _Logs_LogEntry_default_instance_;
}  // namespace models
PROTOBUF_NAMESPACE_OPEN
template<> ::models::Logs* Arena::CreateMaybeMessage<::models::Logs>(Arena*);
template<> ::models::Logs_LogEntry* Arena::CreateMaybeMessage<::models::Logs_LogEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace models {

// ===================================================================

class Logs_LogEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:models.Logs.LogEntry) */ {
 public:
  inline Logs_LogEntry() : Logs_LogEntry(nullptr) {}
  virtual ~Logs_LogEntry();
  explicit constexpr Logs_LogEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Logs_LogEntry(const Logs_LogEntry& from);
  Logs_LogEntry(Logs_LogEntry&& from) noexcept
    : Logs_LogEntry() {
    *this = ::std::move(from);
  }

  inline Logs_LogEntry& operator=(const Logs_LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Logs_LogEntry& operator=(Logs_LogEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Logs_LogEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Logs_LogEntry* internal_default_instance() {
    return reinterpret_cast<const Logs_LogEntry*>(
               &_Logs_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Logs_LogEntry& a, Logs_LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(Logs_LogEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Logs_LogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Logs_LogEntry* New() const final {
    return CreateMaybeMessage<Logs_LogEntry>(nullptr);
  }

  Logs_LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Logs_LogEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Logs_LogEntry& from);
  void MergeFrom(const Logs_LogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Logs_LogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "models.Logs.LogEntry";
  }
  protected:
  explicit Logs_LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_logs_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kBno055FieldNumber = 2,
  };
  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .models.BNO055 bno055 = 2;
  bool has_bno055() const;
  private:
  bool _internal_has_bno055() const;
  public:
  void clear_bno055();
  const ::models::BNO055& bno055() const;
  ::models::BNO055* release_bno055();
  ::models::BNO055* mutable_bno055();
  void set_allocated_bno055(::models::BNO055* bno055);
  private:
  const ::models::BNO055& _internal_bno055() const;
  ::models::BNO055* _internal_mutable_bno055();
  public:
  void unsafe_arena_set_allocated_bno055(
      ::models::BNO055* bno055);
  ::models::BNO055* unsafe_arena_release_bno055();

  // @@protoc_insertion_point(class_scope:models.Logs.LogEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::models::BNO055* bno055_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logs_2eproto;
};
// -------------------------------------------------------------------

class Logs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:models.Logs) */ {
 public:
  inline Logs() : Logs(nullptr) {}
  virtual ~Logs();
  explicit constexpr Logs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Logs(const Logs& from);
  Logs(Logs&& from) noexcept
    : Logs() {
    *this = ::std::move(from);
  }

  inline Logs& operator=(const Logs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Logs& operator=(Logs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Logs& default_instance() {
    return *internal_default_instance();
  }
  static inline const Logs* internal_default_instance() {
    return reinterpret_cast<const Logs*>(
               &_Logs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Logs& a, Logs& b) {
    a.Swap(&b);
  }
  inline void Swap(Logs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Logs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Logs* New() const final {
    return CreateMaybeMessage<Logs>(nullptr);
  }

  Logs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Logs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Logs& from);
  void MergeFrom(const Logs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Logs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "models.Logs";
  }
  protected:
  explicit Logs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_logs_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Logs_LogEntry LogEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kLogFieldNumber = 1,
  };
  // repeated .models.Logs.LogEntry log = 1;
  int log_size() const;
  private:
  int _internal_log_size() const;
  public:
  void clear_log();
  ::models::Logs_LogEntry* mutable_log(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::models::Logs_LogEntry >*
      mutable_log();
  private:
  const ::models::Logs_LogEntry& _internal_log(int index) const;
  ::models::Logs_LogEntry* _internal_add_log();
  public:
  const ::models::Logs_LogEntry& log(int index) const;
  ::models::Logs_LogEntry* add_log();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::models::Logs_LogEntry >&
      log() const;

  // @@protoc_insertion_point(class_scope:models.Logs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::models::Logs_LogEntry > log_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Logs_LogEntry

// .google.protobuf.Timestamp timestamp = 1;
inline bool Logs_LogEntry::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Logs_LogEntry::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Logs_LogEntry::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Logs_LogEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:models.Logs.LogEntry.timestamp)
  return _internal_timestamp();
}
inline void Logs_LogEntry::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:models.Logs.LogEntry.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Logs_LogEntry::release_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Logs_LogEntry::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:models.Logs.LogEntry.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Logs_LogEntry::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Logs_LogEntry::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:models.Logs.LogEntry.timestamp)
  return _internal_mutable_timestamp();
}
inline void Logs_LogEntry::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:models.Logs.LogEntry.timestamp)
}

// .models.BNO055 bno055 = 2;
inline bool Logs_LogEntry::_internal_has_bno055() const {
  return this != internal_default_instance() && bno055_ != nullptr;
}
inline bool Logs_LogEntry::has_bno055() const {
  return _internal_has_bno055();
}
inline const ::models::BNO055& Logs_LogEntry::_internal_bno055() const {
  const ::models::BNO055* p = bno055_;
  return p != nullptr ? *p : reinterpret_cast<const ::models::BNO055&>(
      ::models::_BNO055_default_instance_);
}
inline const ::models::BNO055& Logs_LogEntry::bno055() const {
  // @@protoc_insertion_point(field_get:models.Logs.LogEntry.bno055)
  return _internal_bno055();
}
inline void Logs_LogEntry::unsafe_arena_set_allocated_bno055(
    ::models::BNO055* bno055) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bno055_);
  }
  bno055_ = bno055;
  if (bno055) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:models.Logs.LogEntry.bno055)
}
inline ::models::BNO055* Logs_LogEntry::release_bno055() {
  
  ::models::BNO055* temp = bno055_;
  bno055_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::models::BNO055* Logs_LogEntry::unsafe_arena_release_bno055() {
  // @@protoc_insertion_point(field_release:models.Logs.LogEntry.bno055)
  
  ::models::BNO055* temp = bno055_;
  bno055_ = nullptr;
  return temp;
}
inline ::models::BNO055* Logs_LogEntry::_internal_mutable_bno055() {
  
  if (bno055_ == nullptr) {
    auto* p = CreateMaybeMessage<::models::BNO055>(GetArena());
    bno055_ = p;
  }
  return bno055_;
}
inline ::models::BNO055* Logs_LogEntry::mutable_bno055() {
  // @@protoc_insertion_point(field_mutable:models.Logs.LogEntry.bno055)
  return _internal_mutable_bno055();
}
inline void Logs_LogEntry::set_allocated_bno055(::models::BNO055* bno055) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bno055_);
  }
  if (bno055) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bno055)->GetArena();
    if (message_arena != submessage_arena) {
      bno055 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bno055, submessage_arena);
    }
    
  } else {
    
  }
  bno055_ = bno055;
  // @@protoc_insertion_point(field_set_allocated:models.Logs.LogEntry.bno055)
}

// -------------------------------------------------------------------

// Logs

// repeated .models.Logs.LogEntry log = 1;
inline int Logs::_internal_log_size() const {
  return log_.size();
}
inline int Logs::log_size() const {
  return _internal_log_size();
}
inline void Logs::clear_log() {
  log_.Clear();
}
inline ::models::Logs_LogEntry* Logs::mutable_log(int index) {
  // @@protoc_insertion_point(field_mutable:models.Logs.log)
  return log_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::models::Logs_LogEntry >*
Logs::mutable_log() {
  // @@protoc_insertion_point(field_mutable_list:models.Logs.log)
  return &log_;
}
inline const ::models::Logs_LogEntry& Logs::_internal_log(int index) const {
  return log_.Get(index);
}
inline const ::models::Logs_LogEntry& Logs::log(int index) const {
  // @@protoc_insertion_point(field_get:models.Logs.log)
  return _internal_log(index);
}
inline ::models::Logs_LogEntry* Logs::_internal_add_log() {
  return log_.Add();
}
inline ::models::Logs_LogEntry* Logs::add_log() {
  // @@protoc_insertion_point(field_add:models.Logs.log)
  return _internal_add_log();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::models::Logs_LogEntry >&
Logs::log() const {
  // @@protoc_insertion_point(field_list:models.Logs.log)
  return log_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace models

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_logs_2eproto
