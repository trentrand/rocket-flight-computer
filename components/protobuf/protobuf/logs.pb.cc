// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logs.proto

#include "logs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace models {
constexpr Logs_LogEntry::Logs_LogEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(nullptr)
  , bno055_(nullptr){}
struct Logs_LogEntryDefaultTypeInternal {
  constexpr Logs_LogEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Logs_LogEntryDefaultTypeInternal() {}
  union {
    Logs_LogEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Logs_LogEntryDefaultTypeInternal _Logs_LogEntry_default_instance_;
constexpr Logs::Logs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : log_(){}
struct LogsDefaultTypeInternal {
  constexpr LogsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogsDefaultTypeInternal() {}
  union {
    Logs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogsDefaultTypeInternal _Logs_default_instance_;
}  // namespace models
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_logs_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_logs_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_logs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_logs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::models::Logs_LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::models::Logs_LogEntry, timestamp_),
  PROTOBUF_FIELD_OFFSET(::models::Logs_LogEntry, bno055_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::models::Logs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::models::Logs, log_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::models::Logs_LogEntry)},
  { 7, -1, sizeof(::models::Logs)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::models::_Logs_LogEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::models::_Logs_default_instance_),
};

const char descriptor_table_protodef_logs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nlogs.proto\022\006models\032\037google/protobuf/ti"
  "mestamp.proto\032\021peripherals.proto\"\205\001\n\004Log"
  "s\022\"\n\003log\030\001 \003(\0132\025.models.Logs.LogEntry\032Y\n"
  "\010LogEntry\022-\n\ttimestamp\030\001 \001(\0132\032.google.pr"
  "otobuf.Timestamp\022\036\n\006bno055\030\002 \001(\0132\016.model"
  "s.BNO055b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_logs_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_peripherals_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_logs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_logs_2eproto = {
  false, false, 216, descriptor_table_protodef_logs_2eproto, "logs.proto", 
  &descriptor_table_logs_2eproto_once, descriptor_table_logs_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_logs_2eproto::offsets,
  file_level_metadata_logs_2eproto, file_level_enum_descriptors_logs_2eproto, file_level_service_descriptors_logs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_logs_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_logs_2eproto);
  return descriptor_table_logs_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_logs_2eproto(&descriptor_table_logs_2eproto);
namespace models {

// ===================================================================

class Logs_LogEntry::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Logs_LogEntry* msg);
  static const ::models::BNO055& bno055(const Logs_LogEntry* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Logs_LogEntry::_Internal::timestamp(const Logs_LogEntry* msg) {
  return *msg->timestamp_;
}
const ::models::BNO055&
Logs_LogEntry::_Internal::bno055(const Logs_LogEntry* msg) {
  return *msg->bno055_;
}
void Logs_LogEntry::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void Logs_LogEntry::clear_bno055() {
  if (GetArena() == nullptr && bno055_ != nullptr) {
    delete bno055_;
  }
  bno055_ = nullptr;
}
Logs_LogEntry::Logs_LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:models.Logs.LogEntry)
}
Logs_LogEntry::Logs_LogEntry(const Logs_LogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_bno055()) {
    bno055_ = new ::models::BNO055(*from.bno055_);
  } else {
    bno055_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:models.Logs.LogEntry)
}

void Logs_LogEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bno055_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(bno055_));
}

Logs_LogEntry::~Logs_LogEntry() {
  // @@protoc_insertion_point(destructor:models.Logs.LogEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Logs_LogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete bno055_;
}

void Logs_LogEntry::ArenaDtor(void* object) {
  Logs_LogEntry* _this = reinterpret_cast< Logs_LogEntry* >(object);
  (void)_this;
}
void Logs_LogEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Logs_LogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Logs_LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:models.Logs.LogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArena() == nullptr && bno055_ != nullptr) {
    delete bno055_;
  }
  bno055_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Logs_LogEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .models.BNO055 bno055 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bno055(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Logs_LogEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:models.Logs.LogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // .models.BNO055 bno055 = 2;
  if (this->has_bno055()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bno055(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:models.Logs.LogEntry)
  return target;
}

size_t Logs_LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:models.Logs.LogEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .models.BNO055 bno055 = 2;
  if (this->has_bno055()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bno055_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Logs_LogEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:models.Logs.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const Logs_LogEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Logs_LogEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:models.Logs.LogEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:models.Logs.LogEntry)
    MergeFrom(*source);
  }
}

void Logs_LogEntry::MergeFrom(const Logs_LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:models.Logs.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.has_bno055()) {
    _internal_mutable_bno055()->::models::BNO055::MergeFrom(from._internal_bno055());
  }
}

void Logs_LogEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:models.Logs.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logs_LogEntry::CopyFrom(const Logs_LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:models.Logs.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logs_LogEntry::IsInitialized() const {
  return true;
}

void Logs_LogEntry::InternalSwap(Logs_LogEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Logs_LogEntry, bno055_)
      + sizeof(Logs_LogEntry::bno055_)
      - PROTOBUF_FIELD_OFFSET(Logs_LogEntry, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Logs_LogEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Logs::_Internal {
 public:
};

Logs::Logs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  log_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:models.Logs)
}
Logs::Logs(const Logs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      log_(from.log_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:models.Logs)
}

void Logs::SharedCtor() {
}

Logs::~Logs() {
  // @@protoc_insertion_point(destructor:models.Logs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Logs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Logs::ArenaDtor(void* object) {
  Logs* _this = reinterpret_cast< Logs* >(object);
  (void)_this;
}
void Logs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Logs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Logs::Clear() {
// @@protoc_insertion_point(message_clear_start:models.Logs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Logs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .models.Logs.LogEntry log = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_log(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Logs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:models.Logs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .models.Logs.LogEntry log = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_log_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_log(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:models.Logs)
  return target;
}

size_t Logs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:models.Logs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .models.Logs.LogEntry log = 1;
  total_size += 1UL * this->_internal_log_size();
  for (const auto& msg : this->log_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Logs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:models.Logs)
  GOOGLE_DCHECK_NE(&from, this);
  const Logs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Logs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:models.Logs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:models.Logs)
    MergeFrom(*source);
  }
}

void Logs::MergeFrom(const Logs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:models.Logs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  log_.MergeFrom(from.log_);
}

void Logs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:models.Logs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logs::CopyFrom(const Logs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:models.Logs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logs::IsInitialized() const {
  return true;
}

void Logs::InternalSwap(Logs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  log_.InternalSwap(&other->log_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Logs::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace models
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::models::Logs_LogEntry* Arena::CreateMaybeMessage< ::models::Logs_LogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::models::Logs_LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::models::Logs* Arena::CreateMaybeMessage< ::models::Logs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::models::Logs >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
